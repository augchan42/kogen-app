diff --git a/node_modules/keccak256/dist/keccak256.js b/node_modules/keccak256/dist/keccak256.js
index 9ca0b64..ccf33ea 100644
--- a/node_modules/keccak256/dist/keccak256.js
+++ b/node_modules/keccak256/dist/keccak256.js
@@ -2,13 +2,24 @@
 var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
-const bn_js_1 = __importDefault(require("bn.js"));
-const buffer_1 = __importDefault(require("buffer"));
-const keccak_1 = __importDefault(require("keccak"));
-const Buffer = buffer_1.default.Buffer;
+import Keccak from 'keccak/lib/keccak';
+
+function createKeccakHash(data) {
+    const keccak = new Keccak();
+    keccak.initialize(512, 256);  // Initialize with specific rate and capacity
+    keccak.absorb(Buffer.from(data));
+    keccak.absorbLastFewBits(0x01);  // Typically a bit pattern needed to finalize the input
+    const hash = keccak.squeeze(32);  // Squeeze out 32 bytes of output
+    return hash;
+}
+
+import { Buffer } from 'buffer'
+import { isBN } from 'bn.js'
+globalThis.Buffer = Buffer
+
 function keccak256(value) {
     value = toBuffer(value);
-    return (0, keccak_1.default)('keccak256').update(value).digest();
+    return createKeccakHash(value);
 }
 function toBuffer(value) {
     if (!Buffer.isBuffer(value)) {
@@ -29,7 +40,7 @@ function toBuffer(value) {
         else if (value === null || value === undefined) {
             value = Buffer.allocUnsafe(0);
         }
-        else if (bn_js_1.default.isBN(value)) {
+        else if (isBN(value)) {
             value = value.toArrayLike(Buffer);
         }
         else if (value.toArray) {
@@ -83,4 +94,4 @@ function intToHex(i) {
 if (typeof window !== 'undefined') {
     window.keccak256 = keccak256;
 }
-module.exports = keccak256;
+export default keccak256;
